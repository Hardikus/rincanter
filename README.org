#+OPTIONS: author:nil timestamp:nil

Welcome to Rincanter!

* About

  Rincanter is a clojure/incanter wrapper around the rosuda JRIEngine
  Java/R bridge. The hope is to allow easy access to an embedded R
  engine from incanter. It also offers translation between
  clojure/incanter datatypes and R datatypes such as R dataframe to
  incanter dataset.

* Install

  As rincanter sits on top the R and the org.rosuda JRI and JRIEngine packages,
  you will need install these to use rincanter. This can be a bit
  tricky, as the JRI component needs to compile some native JNI libs
  and install them on the java.library.path in order to run.

** Install R for your platform

   The directions for installing R are outside the scope of this
   document, but R is well supported on most platforms, and has great
   documentation: [[http://cran.r-project.org/][R Project Page]]

** Download and Install the rosuda JRI and REngine components
   
   You will need to download and build the rosuda JRIEngine
   components:

#+BEGIN_EXAMPLE 
   svn co svn://svn.rforge.net/org/trunk/rosuda/REngine
   svn://svn.rforge.net/org/trunk/rosuda/JRI
   cd JRI
   configure && make
#+END_EXAMPLE

   You will now have a jri native library file in this directory. Depending on
   your platform it will have a name like: 

   - libjri.so (linux)
   - libjri.jnilib (Mac OS X) 
   - jri.dll (Windows)

#+BEGIN_EXAMPLE 
  cd ../REngine
  configure && make
#+END_EXAMPLE

  You will now have an REngine.jar file in this directory.

#+BEGIN_EXAMPLE 
  cd JRI # this is a child dir of REngine, different from the JRI dir above
  configure && make
#+END_EXAMPLE

  You will now have an JRIEngine.jar file in this directory.

** Install incanter from git

   I am using features in incanter that are in git but not up on clojars
   yet. You will need to pull incanter from github and from the incanter
   directory run:

#+BEGIN_EXAMPLE 
   git clone git://github.com/liebke/incanter.git
   cd incanter
   mvn install
#+END_EXAMPLE

** Install rincanter from git

#+BEGIN_EXAMPLE
   git clone git@github.com:jolby/rincanter.git
   cd rincanter
   lein deps # this installs incanter and its deps into the lib subdir
#+END_EXAMPLE

   Now, move the two .jar files (REngine.jar and JRIEngine.jar) into the
   lib directory of the rincanter project. Then move the native jri lib
   into the root of the rincanter project.

** Make sure R_HOME is set (only if needed)
   On some platforms or installations, you may also need to set the
   environment variable R_HOME. The value you use for R_HOME will
   depend on your particular installation, but following are typical
   values for setting R_HOME in the shell and in emacs for Mac OS X:

   - Note for shell: On some systems, R_HOME may already be set, so
   this step is optional.

   shell:
#+BEGIN_EXAMPLE 
  R_HOME=/Library/Frameworks/R.framework/Resources; export R_HOME
#+END_EXAMPLE

  You can also set this in one of your .profile files to ensure that
  it is always set in your shell. 

  For emacs, in your scratch buffer, enter the elisp form:
#+BEGIN_EXAMPLE 
  (setenv "R_HOME" "/Library/Frameworks/R.framework/Resources")
#+END_EXAMPLE

  Then, go to the end of that line and execute the key-command:

#+BEGIN_EXAMPLE 
  C-x C-e
#+END_EXAMPLE

  ..to execute the elisp form in your running emacs. You can also put
  that form in one of your emacs startup files if you want R_HOME to
  always be set.

** Test and Run
   Now you are ready to download rincanter and run it:

   To run the unit tests:
#+BEGIN_EXAMPLE 
   lein test
#+END_EXAMPLE

   To start a swank-repl:
#+BEGIN_EXAMPLE 
   lein repl
#+END_EXAMPLE

* Example Usage
  The main entry points are the functions:
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-eval][r-eval]]
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/with-r-eval][with-r-eval]]
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-set!][r-set!]]
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-get][r-get]]

** r-eval
You can play around with Clojure/Incanter and R in the same REPL session:
#+BEGIN_EXAMPLE clojure
   (r-eval "data(iris)")

   ;;eval's the iris dataframe object, converts into
   ;;incanter dataset
   (r-eval "iris")
 
   ;;create vector on R side
   (r-eval "vec_in_r = c(1,2,3)")
   
   ;;now retrieve it, converting to Clojure vector
   (r-get "vec_in_r")
#+END_EXAMPLE
 
** with-r-eval
Using with-r-eval, it is even easier. Within this form, all forms
enclosed in parenthesis are evaluated as normal Clojure forms, strings
are evaluated in R using r-eval:


#+BEGIN_EXAMPLE clojure
   (with-r-eval 
     "data(iris)"

     ;;eval's the iris dataframe object, converts into
     ;;incanter dataset
     "iris"
 
     ;;create vector on R side
     "vec_in_r = c(1,2,3)"
   
     ;;now retrieve it, converting to Clojure vector
     (r-get "vec_in_r"))
#+END_EXAMPLE


* Documentation
** API Documentation

   API Documentation for rincanter is located at:
   [[http://jolby.github.com/rincanter][Rincanter API]]
