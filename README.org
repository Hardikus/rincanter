#+OPTIONS: author:nil timestamp:nil

Welcome to Rincanter!

* About

  Rincanter is a [[http://clojure.org][Clojure]] and [[http://data-sorcery.org/][Incanter]] wrapper around the 
  Rosuda [[http://www.rforge.net/rJava/][JRIEngine Java/R bridge]].
  The hope is to allow easy access to an embedded R
  engine from Incanter. It also offers translation between
  [[http://clojure.org][Clojure]] and [[http://data-sorcery.org/][Incanter]] datatypes and R datatypes such as R dataframe to
  [[http://data-sorcery.org/][Incanter]] dataset.

* Install
  
** Install Leiningen
   Rincanter uses [[http://github.com/technomancy/leiningen][Leiningen]] to manage its dependencies on Clojure,
   Incanter, and Rosuda JRI components. You will need to install
   [[http://github.com/technomancy/leiningen][Leiningen]] following the instructions on its
   [[http://github.com/technomancy/leiningen][project page]].
  
** Install R for your platform

   The directions for installing R are outside the scope of this
   document, but R is well supported on most platforms, and has great
   documentation: [[http://cran.r-project.org/][R Project Page]]


** Make sure R_HOME is set.
   On some platforms or installations, you may also need to set the
   environment variable R_HOME. The value you use for R_HOME will
   depend on your particular installation, but following are typical
   values for setting R_HOME in the shell and in emacs for Mac OS X:

   shell:
#+BEGIN_EXAMPLE 
  R_HOME=/Library/Frameworks/R.framework/Resources; export R_HOME
#+END_EXAMPLE

  You can also set this in one of your .profile files to ensure that
  it is always set in your shell. 

  For emacs, in your scratch buffer, enter the elisp form:
#+BEGIN_EXAMPLE 
  (setenv "R_HOME" "/Library/Frameworks/R.framework/Resources")
#+END_EXAMPLE

  Then, go to the end of that line and execute the key-command:

#+BEGIN_EXAMPLE 
  C-x C-e
#+END_EXAMPLE

  ..to execute the elisp form in your running emacs. You can also put
  that form in one of your emacs startup files if you want R_HOME to
  always be set.


** Install Rincanter from git

#+BEGIN_EXAMPLE
   git clone git://github.com/jolby/rincanter.git
   cd rincanter
   lein deps # This installs Incanter and its deps into the lib subdir
   lein native-deps #This installs the native libs in the native subdir 
#+END_EXAMPLE


** Test and Run
   Now you are ready to test and run Rincanter:

   To run the unit tests:
#+BEGIN_EXAMPLE 
   lein test
#+END_EXAMPLE

   To start a repl:
#+BEGIN_EXAMPLE 
   lein repl
#+END_EXAMPLE

   To start a swank session and connect with Emacs/SLIME:

#+BEGIN_EXAMPLE 
   lein swank
#+END_EXAMPLE

   ... then, in Emacs:

#+BEGIN_EXAMPLE 
   M-x slime-connect
#+END_EXAMPLE

* Example Usage
  The main entry points are the functions:
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-eval][r-eval]]
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/with-r-eval][with-r-eval]]
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-set!][r-set!]]
  - [[http://jolby.github.com/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-get][r-get]]

** r-eval
You can play around with Clojure/Incanter and R in the same REPL session:
#+BEGIN_EXAMPLE clojure
   (use '(com.evocomputing rincanter))

   (r-eval "data(iris)")

   ;;eval's the iris dataframe object, converts into
   ;;incanter dataset
   (r-eval "iris")
 
   ;;create vector on R side
   (r-eval "vec_in_r = c(1,2,3)")
   
   ;;now retrieve it, converting to Clojure vector
   (r-get "vec_in_r")
#+END_EXAMPLE

plotting:
#+BEGIN_EXAMPLE
   (use '(com.evocomputing rincanter))

   (r-eval "data(iris)")
   
   ;;initialize the R graphics device for your system:
   ;;For Mac OS X
   (r-eval "quartz()")
   ;;windows: 
   (r-eval "windows()")
   ;;unix/linux
   (r-eval "x11()")

   ;;create the plot using values from the iris dataset
   (r-eval "plot(Sepal.Length ~ Sepal.Width, data = iris)")
   ;;alter this existing plot
   (r-eval "title(main = \"Iris Sepal Measurements\")")
#+END_EXAMPLE
 
** with-r-eval
Using with-r-eval, it is even easier. Within this form, all forms
enclosed in parenthesis are evaluated as normal Clojure forms, strings
are evaluated in R using r-eval:


#+BEGIN_EXAMPLE clojure
   (use '(com.evocomputing rincanter))

   (with-r-eval 
     "data(iris)"

     ;;eval's the iris dataframe object, converts into
     ;;incanter dataset
     "iris"
 
     ;;create vector on R side
     "vec_in_r = c(1,2,3)"
   
     ;;now retrieve it, converting to Clojure vector
     (r-get "vec_in_r"))
#+END_EXAMPLE


* Documentation
** API Documentation

   API Documentation for rincanter is located at:
   [[http://jolby.github.com/rincanter][Rincanter API]]
